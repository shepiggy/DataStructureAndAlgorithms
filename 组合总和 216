/*
216. 组合总和 III

找出所有相加之和为 n 的 k 个数的组合，且满足下列条件：

只使用数字1到9
每个数字 最多使用一次 
返回 所有可能的有效组合的列表 。该列表不能包含相同的组合两次，组合可以以任何顺序返回。


示例 1:
输入: k = 3, n = 7
输出: [[1,2,4]]
解释:
1 + 2 + 4 = 7
没有其他符合的组合了。

示例 2:
输入: k = 3, n = 9
输出: [[1,2,6], [1,3,5], [2,3,4]]
解释:
1 + 2 + 6 = 9
1 + 3 + 5 = 9
2 + 3 + 4 = 9
没有其他符合的组合了。

示例 3:
输入: k = 4, n = 1
输出: []
解释: 不存在有效的组合。
在[1,9]范围内使用4个不同的数字，我们可以得到的最小和是1+2+3+4 = 10，因为10 > 1，没有有效的组合。
 

提示:

2 <= k <= 9
1 <= n <= 60
*/

class Solution {   
    /*
        由于 ArrayList 和 LinkedList 各自的优缺点不同，
        所以 res 选 ArrayList； path 选 LinkedList。
        同 77. 组合 的 res、path 的容器类型。
    */
    List<List<Integer>> res = new ArrayList<>();
    // LinkedList<Integer> path = new LinkedList<>();//这里的左边也一定要用 LinkedList
    List<Integer> path = new LinkedList<>();

    public List<List<Integer>> combinationSum3(int k, int n) {
        backtracking(n, k, 1, 0);
        return res;        
    }

    private void backtracking(int targetNum, int k, int startIndex, int sum) {
        //剪枝
        if(sum > targetNum) {
            return;
        }

        if(k == path.size()) {
            if(sum == targetNum) {
                res.add(new ArrayList<>(path));
            }
            return;
        }

        //剪枝 i <= 9 - (k - path.size()) + 1
        for(int i = startIndex; i <= 9 - (k - path.size()) + 1; i++) {
            path.add(i);
            sum += i;
            backtracking(targetNum, k, i + 1, sum);

            sum -= i;
            ((LinkedList)path).removeLast();//上面的 path 如果没有用 LinkedList 的话，下面的path就一定要强转成子类的类型。因为父类不能使用子类特有的方法、属性（removeLast就是 LinkedLast 的特有方法）（这个属于多态的知识）
        }

    }
}
