/*
57. 插入区间

给你一个 无重叠的 ，按照区间起始端点排序的区间列表。

在列表中插入一个新的区间，你需要确保列表中的区间仍然有序且不重叠（如果有必要的话，可以合并区间）。

示例 1：
输入：intervals = [[1,3],[6,9]], newInterval = [2,5]
输出：[[1,5],[6,9]]

示例 2：
输入：intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
输出：[[1,2],[3,10],[12,16]]
解释：这是因为新的区间 [4,8] 与 [3,5],[6,7],[8,10] 重叠。

示例 3：
输入：intervals = [], newInterval = [5,7]
输出：[[5,7]]

示例 4：
输入：intervals = [[1,5]], newInterval = [2,3]
输出：[[1,5]]

示例 5：
输入：intervals = [[1,5]], newInterval = [2,7]
输出：[[1,7]]
 
提示：

0 <= intervals.length <= 104
intervals[i].length == 2
0 <= intervals[i][0] <= intervals[i][1] <= 105
intervals 根据 intervals[i][0] 按 升序 排列
newInterval.length == 2
0 <= newInterval[0] <= newInterval[1] <= 105
*/

class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        List<int[]> res = new ArrayList<>();

        int len = intervals.length;
        int i = 0;
        while(i < len && intervals[i][1] < newInterval[0]) {
            res.add(intervals[i++]);//后置++是先取值再++
        }
        //到这里就代表了newInterval区间处于intervals[i]的范围区间内，或者是在其右侧即newInterval在res的最后一个位置
        if(i < len) {
            //这里就代表了newInterval区间是处于中间的，而非右边
            newInterval[0] = Math.min(intervals[i][0], newInterval[0]);

            while(i < len && intervals[i][0] <= newInterval[1]) {
                //将intervals[i]和newInterval结合
                newInterval[1] = Math.max(intervals[i++][1], newInterval[1]);//后置++是先取值再++
            }
        }
        res.add(newInterval);

        while(i < len) {
            //这里就代表了newInterval区间是处于右边的，而非中间
            res.add(intervals[i++]);
        }

        return res.toArray(new int[res.size()][]);//注意！

    }
}
