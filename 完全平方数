/*
279. 完全平方数

给你一个整数 n ，返回 和为 n 的完全平方数的最少数量 。

完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。

示例 1：
输入：n = 12
输出：3 
解释：12 = 4 + 4 + 4

示例 2：
输入：n = 13
输出：2
解释：13 = 4 + 9
 
提示：

1 <= n <= 104
*/

//动态规划：
class Solution {
    public int numSquares(int n) {
        int max = Integer.MAX_VALUE;
        int[] dp = new int[n + 1];
        //初始化
        for (int j = 0; j <= n; j++) {
            dp[j] = max;
        }
	    //对dp数组除了for-loop初始化，也可以用JAVA库函数的Arrays.fill()函數。
	    //Arrays.fill(dp, Integer.MAX_VALUE);
	
        //当和为0时，组合的个数为0，因为最小是1开始的
        dp[0] = 0;
       
        for (int i = 1; i * i <= n; i++) {
            for (int j = i * i; j <= n; j++) {
                //if (dp[j - i * i] != max) {
                    dp[j] = Math.min(dp[j], dp[j - i * i] + 1);
                //}
		        //不需要这个if statement，因为在完全平方数这一题不会有“凑不成”的情况发生（ 一定可以用“1”来组成任何一个n）
            }
        }
        return dp[n];
    }
}
