/*
  23. 合并 K 个升序链表
  
  给你一个链表数组，每个链表都已经按升序排列。
  请你将所有链表合并到一个升序链表中，返回合并后的链表。
  
  示例 1：
  输入：lists = [[1,4,5],[1,3,4],[2,6]]
  输出：[1,1,2,3,4,4,5,6]
  解释：链表数组如下：
  [
    1->4->5,
    1->3->4,
    2->6
  ]
  将它们合并到一个有序链表中得到。
  1->1->2->3->4->4->5->6
  
  示例 2：
  输入：lists = []
  输出：[]
  
  示例 3：
  输入：lists = [[]]
  输出：[]
   
  提示：
  k == lists.length
  0 <= k <= 10^4
  0 <= lists[i].length <= 500
  -10^4 <= lists[i][j] <= 10^4
  lists[i] 按 升序 排列
  lists[i].length 的总和不超过 10^4
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

//21. 合并两个有序链表（使用递归）
struct ListNode* mergeTwo(struct ListNode* A, struct ListNode* B)
{
	if(A==NULL){	//指针A指空 则返回B 反之亦然 
		return B;
	}
	if(B==NULL){	
		return A;
	}
	if(A->val<B->val){	//若A\B均不指向空节点 取小的数 随后递归  
		A->next = mergeTwo(A->next, B);
		return A;
	}else{
		B->next = mergeTwo(A, B->next);
		return B;
	}
}
//解决的方法就是将k个转换为k/2个，转换为k/2/2个，直到0/1/2
struct ListNode* mergeKLists(struct ListNode** lists, int listsSize){//之所以是二级指针是因为指向的是数组，数组内又是链表的第一个元素的地址即是二级指针
    if(listsSize == 0) return NULL;
	if(listsSize == 1) return lists[0];
	if(listsSize == 2) return mergeTwo(lists[0], lists[1]);
	
	int mid = listsSize / 2;
	struct ListNode* tmp1[mid];
	struct ListNode* tmp2[listsSize-mid];
	
	int i = 0;
	for(i =0 ;i < mid; ++i){
		tmp1[i] = lists[i];
	}
	for(i = mid;i < listsSize; ++i){
		tmp2[i-mid] = lists[i];
	}
	
	return mergeTwo(mergeKLists(tmp1, mid), mergeKLists(tmp2, listsSize-mid));
}
