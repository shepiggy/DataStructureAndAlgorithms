/*
  4.寻找两个正序数组的中位数
  给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 。
  
  算法的时间复杂度应该为 O(log (m+n)) 。
  
  
  示例 1：
  输入：nums1 = [1,3], nums2 = [2]
  输出：2.00000
  解释：合并数组 = [1,2,3] ，中位数 2
  
  示例 2：
  输入：nums1 = [1,2], nums2 = [3,4]
  输出：2.50000
  解释：合并数组 = [1,2,3,4] ，中位数 (2 + 3) / 2 = 2.5
   
  
  提示：
  
  nums1.length == m
  nums2.length == n
  0 <= m <= 1000
  0 <= n <= 1000
  1 <= m + n <= 2000
  -106 <= nums1[i], nums2[i] <= 106
*/

//方法一：（时间复杂度是 O(m + n)）
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m = nums1.length, n = nums2.length;
        int[] nums = new int[m + n];

        for(int i = 0; i < m; i++) nums[i] = nums1[i];
    
        int end1 = m - 1, end2 = n - 1, end = m + n - 1;
        
        //同 88. 合并两个有序数组
        while(end1 >= 0 && end2 >= 0) {
            if(nums1[end1] > nums2[end2]) nums[end--] = nums1[end1--];
            else nums[end--] = nums2[end2--];
        }
        while(end2 >= 0) nums[end--] = nums2[end2--];

        //for(int i : nums) System.out.print(i + " ");
        
        if((m + n) % 2 == 1) return nums[(m + n) / 2];
        else {
            //System.out.print(nums[(m + n) / 2] + " " + nums[(m + n) / 2 - 1]);
            if((m + n) == 1) return nums[(m + n) - 1];
            return (double)((nums[(m + n) / 2] + nums[(m + n) / 2 - 1])) / 2;//想得到浮点数其实还可以让整形 / 2.0.即只要有浮点数参与计算得到的结果就是浮点数        
        }
    }
}


//方法二：（时间复杂度是 O(log (m+n))

/*
    之前提交的代码的复杂度是 O(m + n)，而下面方法的复杂度是 O(log (m+n))
    看到时间复杂度是 log 的，就应该联想到 二分查找法
*/
class Solution {

    int find (int[] nums1, int i, int[] nums2, int j, int k) {
        if(nums1.length - i > nums2.length - j) return find(nums2, j, nums1, i, k);//nums1.length - i 就是nums1数组剩余的元素的个数。并且我们规定 nums1 数组的剩余元素要 小于等于 nums2 数组的剩余元素
        if(nums1.length == i) return nums2[j + k - 1];//nums1={1,2} nums2={3,4}的right的值就是根据这里得来的
        if(k == 1) return Math.min(nums1[i], nums2[j]);

        int idx1 = Math.min(nums1.length, i + k / 2);//可能i+k/2的值会超过nums1数组
        int idx2 = j + k - k / 2;

        if(nums1[idx1 - 1] < nums2[idx2 - 1]) return find(nums1, idx1, nums2, j, k - (idx1 - i));
        else return find(nums1, i, nums2, idx2, k - (idx2 - j));
    }

    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int len = nums1.length + nums2.length;

        if(len % 2 == 0) {
            int left = find(nums1, 0, nums2, 0, len / 2);
            int right = find(nums1, 0, nums2, 0, len / 2 + 1);
            return (left + right) / 2.0;
        } else {
            return find(nums1, 0, nums2, 0, len / 2 + 1);//注意是 len / 2 + 1 还要多加一个 1
        }
    }
}
