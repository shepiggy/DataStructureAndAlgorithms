/*
  322.零钱兑换
  给你一个整数数组 coins ，表示不同面额的硬币；以及一个整数 amount ，表示总金额。
  
  计算并返回可以凑成总金额所需的 最少的硬币个数 。如果没有任何一种硬币组合能组成总金额，返回 -1 。
  
  你可以认为每种硬币的数量是无限的。
  
   
  
  示例 1：
  输入：coins = [1, 2, 5], amount = 11
  输出：3 
  解释：11 = 5 + 5 + 1
  
  示例 2：
  输入：coins = [2], amount = 3
  输出：-1
  
  示例 3：
  输入：coins = [1], amount = 0
  输出：0
   
  
  提示：
  
  1 <= coins.length <= 12
  1 <= coins[i] <= 231 - 1
  0 <= amount <= 104
*/

/*
    就比如coins = 2，5，7。amount = 27
    那么
    f(27) = min{f(27 - 2) + 1, f(27 - 5) + 1, f(27 - 7) + 1}
    如果amount是0则不需要硬币来组成，即f(0) = 0
    即：f(x) = min{f(x - coins[0]) + 1, f(x - coins[1]) + 1, ..., f(x - coins[n - 1]) + 1}
    我们把不可能coins元素不能组成amount的f(x)置为无穷大，且负数的也置为无穷大（x - coins[n - 1]有可能是负数！）
*/

class Solution {
    public int coinChange(int[] coins, int amount) {
        int[] f = new int[amount + 1];//f数组还包括f(0)哦，所以开辟的数组要比amount大一
        int len = coins.length;
        f[0] = 0;
        for(int i = 1; i <= amount; i++) {
            f[i] = Integer.MAX_VALUE;
            for(int j = 0; j < len; j++) {
                if(i >= coins[j] && f[i - coins[j]] != Integer.MAX_VALUE) {//注意：Integer.MAX_VALUE + 1 = Integer.MIN_VALUE
                    f[i] = Math.min(f[i - coins[j]] + 1, f[i]);
                }
            }
            
        }
        if(f[amount] == Integer.MAX_VALUE) {
            f[amount] = -1;
        }
        return f[amount];
    }
}
