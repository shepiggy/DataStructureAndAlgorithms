/*
  2. 两数相加
  
  给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。
  请你将两个数相加，并以相同形式返回一个表示和的链表。
  你可以假设除了数字 0 之外，这两个数都不会以 0 开头。
  
  示例 1：
  输入：l1 = [2,4,3], l2 = [5,6,4]
  输出：[7,0,8]
  解释：342 + 465 = 807.
  
  示例 2：
  输入：l1 = [0], l2 = [0]
  输出：[0]
  
  示例 3：
  输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
  输出：[8,9,9,9,0,0,0,1]
   
  提示：
  每个链表中的节点数在范围 [1, 100] 内
  0 <= Node.val <= 9
  题目数据保证列表表示的数字不含前导零
*/



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

struct ListNode* BuyListNode(int s) {
    struct ListNode* newnode = (struct ListNode*)malloc(sizeof(struct ListNode));
    newnode->val = s % 10;
    newnode->next = NULL;
    return newnode;
}

struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){
    int carry = 0;
    struct ListNode* cur1 = l1, *cur2 = l2;
    struct ListNode* newnode = NULL;
    struct ListNode* head = NULL, *tail  = NULL;
    

    while(cur1 || cur2) {
       
        if(cur1 && cur2) {
            int sum = cur1->val + cur2->val;
          
            
            if(head == NULL) {
                newnode = BuyListNode(sum);
                if(sum >= 10) carry = 1;
                head = tail = newnode;
            } else {
                int tmp = sum + carry;
                newnode = BuyListNode(tmp);
                

                if(carry != 0) carry = 0;
                if(tmp >= 10) carry = 1;
                tail->next = newnode;
                tail = newnode;
            }
        }

        if(cur1 && !cur2) {
            
            if(head == NULL) {
                newnode = BuyListNode(cur1->val);
                
                if(cur1->val >= 10) carry = 1;
                head = tail = newnode;
            } else {
                newnode = BuyListNode(cur1->val + carry);
                
                if(cur1->val + carry >= 10) carry = 1;
                else carry = 0;
                tail->next = newnode;
                tail = newnode;
            }
        }
        if(!cur1 && cur2) {

            if(head == NULL) {
                newnode = BuyListNode(cur2->val);
                
                if(cur1->val + carry >= 10) carry = 1;
                head = tail = newnode;
            } else {
                newnode = BuyListNode(cur2->val + carry);
                
                if(cur2->val + carry >= 10) carry = 1;
                else carry = 0;
                tail->next = newnode;
                tail = newnode;
            }
        }
        
        if(cur1) {
            cur1 = cur1->next;
        }
        if(cur2) {
            cur2 = cur2->next;
        }
        
    } 
    if(carry == 1) {
        newnode = BuyListNode(carry);
        tail->next = newnode;
        tail = newnode;
    }
    return head;
}
//除了上面的方法，还有递归方法
/*
  测试用例：
  l1 : [2,4,3]       [0]       [9,9,9,9,9,9,9]            [3,7]
  l2 : [5,6,4]       [0]       [9,9,9,9]                  [9,2]
       [7,0,8]       [0]       [8,9,9,9,0,0,0,1]          [2,0,1]
*/
